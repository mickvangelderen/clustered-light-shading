#include "../common.glsl"

#include "cluster_space_buffer.glsl"
// in
#include "cluster_fragment_counts_buffer.glsl"
// out
#include "profiling_cluster_buffer.glsl"

// NOTE(mickvangelderen): This whole shader expects local_size_z = 1
// NOTE(mickvangelderen): We assume local_size_x equals the number of bins in the output histogram.
layout(local_size_x = 256) in;

shared uint shared_values[gl_WorkGroupSize.x];

uint bin(uint n) {
  return uint(8.0*log2(float(n)));
}

void main() {
  bool within_bounds = GLOBAL_INDEX < cluster_space.cluster_count;

  // Read a block of data in one go.
  shared_values[gl_LocalInvocationID.x] = within_bounds ? cluster_fragment_counts[gl_GlobalInvocationID.x] : 0;
  memoryBarrierShared();
  barrier();

  uint acc = 0;
  int end = clamp(cluster_space.cluster_count - gl_WorkGroupID.x * gl_WorkGroupSize.x, 0, 256);
  for (int i = 0; i < end; i++) {
    uint value = shared_values[i];
    if (bin(value) == gl_LocalInvocationID.x) {
      acc += 1;
    }
  }

  atomicAdd(profiling_cluster_buffer.fragments_per_cluster_hist[gl_LocalInvocationID.x], acc);
}
