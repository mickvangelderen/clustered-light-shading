#include "native/PREFIX_SUM"
#include "native/CLUSTERED_LIGHT_SHADING"
#include "native/SAMPLE_COUNT"

#include "../common.glsl"
#include "cluster_space_buffer.glsl"
#include "cluster_fragment_counts_buffer.glsl"

#if SAMPLE_COUNT == 1
layout(binding = DEPTH_SAMPLER_LOC) uniform sampler2D depth_sampler;
#else
layout(binding = DEPTH_SAMPLER_LOC) uniform sampler2DMS depth_sampler;
#endif
layout(location = DEPTH_DIMENSIONS_LOC) uniform ivec2 depth_dimensions;
layout(location = REN_CLP_TO_CLU_CAM) uniform mat4 ren_clp_to_clu_cam;

#if SAMPLE_COUNT == 1
layout(local_size_x = 16, local_size_y = 16, local_size_z = SAMPLE_COUNT) in;
#elif SAMPLE_COUNT == 2
layout(local_size_x =  8, local_size_y = 16, local_size_z = SAMPLE_COUNT) in;
#elif SAMPLE_COUNT == 4
layout(local_size_x =  8, local_size_y =  8, local_size_z = SAMPLE_COUNT) in;
#elif SAMPLE_COUNT == 8
layout(local_size_x =  4, local_size_y =  8, local_size_z = SAMPLE_COUNT) in;
#elif SAMPLE_COUNT == 16
layout(local_size_x =  4, local_size_y =  4, local_size_z = SAMPLE_COUNT) in;
#else
#error Unsupported SAMPLE_COUNT.
#endif

void main() {
  if (any(greaterThanEqual(gl_GlobalInvocationID.xy, depth_dimensions))) {
    // Out of texture bounds.
    return;
  }

  // pos_in_ndc is known.
  vec2 xy_ndc = vec2(ivec2(gl_GlobalInvocationID.xy) * 2 + 1 - depth_dimensions) / vec2(depth_dimensions);
  float z_ndc = texelFetch(depth_sampler, ivec2(gl_GlobalInvocationID.xy), int(gl_LocalInvocationID.z)).r;

  if (z_ndc == 0.0) {
    // Infinitely far (reverse z)
    return;
  }

  vec3 pos_in_cls = cluster_cam_to_clp(from_homogeneous(
      ren_clp_to_clu_cam * to_homogeneous(vec3(xy_ndc, z_ndc))));

  if (all(greaterThanEqual(pos_in_cls, vec3(0.0))) &&
      all(lessThan(pos_in_cls, vec3(cluster_space.dimensions)))) {
    uvec3 idx_in_cls = uvec3(pos_in_cls);
    uint cluster_index = index_3_to_1(idx_in_cls, cluster_space.dimensions);
    atomicAdd(cluster_fragment_counts[cluster_index], 1);
  }
}
