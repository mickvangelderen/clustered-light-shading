#include "native/PREFIX_SUM"

#include "../common.glsl"
#include "../compute_indirect.glsl"
#include "../draw_indirect.glsl"
#include "cls.glsl"

#if PASS == 0
#define LOCAL_X PASS_0_THREADS
#elif PASS == 1
#define LOCAL_X PASS_1_THREADS
#elif PASS == 2
#define LOCAL_X PASS_0_THREADS
#else
#error Invalid PASS!
#endif

#define tid gl_LocalInvocationID.x
#define wid gl_WorkGroupID.x

shared uint values[LOCAL_X];

layout(local_size_x = LOCAL_X) in;

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

// Assumes values are loaded in shared memory.
void scan() {
#if (1 << 0) < LOCAL_X
  sum_2(1 << 0);
#endif
#if (1 << 1) < LOCAL_X
  sum_2(1 << 1);
#endif
#if (1 << 2) < LOCAL_X
  sum_2(1 << 2);
#endif
#if (1 << 3) < LOCAL_X
  sum_2(1 << 3);
#endif
#if (1 << 4) < LOCAL_X
  sum_2(1 << 4);
#endif
#if (1 << 5) < LOCAL_X
  sum_2(1 << 5);
#endif
#if (1 << 6) < LOCAL_X
  sum_2(1 << 6);
#endif
#if (1 << 7) < LOCAL_X
  sum_2(1 << 7);
#endif
#if (1 << 8) < LOCAL_X
  sum_2(1 << 8);
#endif
#if (1 << 9) < LOCAL_X
  sum_2(1 << 9);
#endif
#if (1 << 10) < LOCAL_X
#error Loop insufficiently unrolled.
#endif
}

#if PASS == 0
void main() {
  uint item_count =
      compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  uint blocks_per_dispatch =
      uint_div_ceil(item_count, PASS_0_THREADS * PASS_1_THREADS);
  uint items_per_dispatch = PASS_0_THREADS * blocks_per_dispatch;

  uint offset_begin = wid * items_per_dispatch;
  uint offset_end = offset_begin + items_per_dispatch;

  // Sum up C*PASS_0_THREADS items in chunks of PASS_0_THREADS.
  uint acc = 0;
  for (uint offset = offset_begin; offset < offset_end;
       offset += PASS_0_THREADS) {
    acc += active_cluster_light_counts[offset + tid];
  }

  // Initialize shared memory
  values[tid] = acc;
  memoryBarrierShared();
  barrier();

  scan();

  // Emit output from shared memory.
  if (tid == LOCAL_X - 1) {
    offsets[wid] = values[tid];
  }
}
#elif PASS == 1
void main() {
  // Initialize shared memory
  values[tid] = offsets[tid];
  memoryBarrierShared();
  barrier();

  scan();

  // Emit output from shared memory.
  offsets[tid] = values[tid];
}
#elif PASS == 2
void main() {
  uint item_count =
      compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  uint blocks_per_dispatch =
      uint_div_ceil(item_count, PASS_0_THREADS * PASS_1_THREADS);
  uint items_per_dispatch = PASS_0_THREADS * blocks_per_dispatch;

  uint offset_begin = wid * items_per_dispatch;
  uint offset_end = offset_begin + items_per_dispatch;

  uint cluster_index = active_cluster_indices[wid];

  uint acc = (wid > 0) ? offsets[wid - 1] : 0;
  for (uint offset = offset_begin; offset < offset_end;
       offset += PASS_0_THREADS) {
    // Initialize shared memory
    uint light_count = active_cluster_light_counts[offset + tid];
    values[tid] = light_count;
    memoryBarrierShared();
    barrier();

    scan();

    // Emit cluster meta.
    uint light_offset = acc + (tid > 0 ? values[tid - 1] : 0);
    cluster_metas[cluster_index].light_index_count = light_count;
    cluster_metas[cluster_index].light_index_offset = light_offset;

    // Add the total sum of the current segment to the accumulator.
    acc += values[LOCAL_X - 1];
  }
}
#else
#error Invalid PASS!
#endif
