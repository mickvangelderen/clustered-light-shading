#include "native/PREFIX_SUM"
#include "native/CLUSTERED_LIGHT_SHADING"
#include "native/PROFILING"

#include "../common.glsl"
#include "cluster_space_buffer.glsl"
// in
#include "active_cluster_light_counts_buffer.glsl"
// use
#include "offsets_buffer.glsl"
// out
#include "active_cluster_light_offsets_buffer.glsl"
#include "compute_commands_buffer.glsl"
#include "profiling_cluster_buffer.glsl"

#if !defined(PASS)
#error PASS is not defined.
#endif
#if PASS == 0
#define LOCAL_X PASS_0_THREADS
#elif PASS == 1
#define LOCAL_X PASS_1_THREADS
#elif PASS == 2
#define LOCAL_X PASS_0_THREADS
#else
#error Invalid PASS!
#endif

#define tid gl_LocalInvocationID.x
#define wid gl_WorkGroupID.x

shared uint values[LOCAL_X];

layout(local_size_x = LOCAL_X) in;

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

// Assumes values are loaded in shared memory.
void scan() {
#if (1 << 0) < LOCAL_X
  sum_2(1 << 0);
#endif
#if (1 << 1) < LOCAL_X
  sum_2(1 << 1);
#endif
#if (1 << 2) < LOCAL_X
  sum_2(1 << 2);
#endif
#if (1 << 3) < LOCAL_X
  sum_2(1 << 3);
#endif
#if (1 << 4) < LOCAL_X
  sum_2(1 << 4);
#endif
#if (1 << 5) < LOCAL_X
  sum_2(1 << 5);
#endif
#if (1 << 6) < LOCAL_X
  sum_2(1 << 6);
#endif
#if (1 << 7) < LOCAL_X
  sum_2(1 << 7);
#endif
#if (1 << 8) < LOCAL_X
  sum_2(1 << 8);
#endif
#if (1 << 9) < LOCAL_X
  sum_2(1 << 9);
#endif
#if (1 << 10) < LOCAL_X
#error Loop insufficiently unrolled.
#endif
}

#if PASS == 0
void main() {
  uint item_count =
      compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  uint blocks_per_dispatch =
      ceiled_div_u32(item_count, PASS_0_THREADS * PASS_1_THREADS);
  uint items_per_dispatch = PASS_0_THREADS * blocks_per_dispatch;

  uint offset_begin = wid * items_per_dispatch;
  uint offset_end = offset_begin + items_per_dispatch;

  // Sum up C*PASS_0_THREADS items in chunks of PASS_0_THREADS.
  uint acc = 0;
  for (uint offset = offset_begin; offset < offset_end;
       offset += PASS_0_THREADS) {
    uint active_cluster_index = offset + tid;
    if (active_cluster_index < CLUSTERED_LIGHT_SHADING_MAX_ACTIVE_CLUSTERS) {
      acc += active_cluster_light_counts[offset + tid];
    }
  }

  // Initialize shared memory
  values[tid] = acc;
  memoryBarrierShared();
  barrier();

  scan();

  // Emit output from shared memory.
  if (tid == LOCAL_X - 1) {
    offsets[wid] = values[tid];
  }
}
#elif PASS == 1
void main() {
  // Initialize shared memory
  values[tid] = offsets[tid];
  memoryBarrierShared();
  barrier();

  scan();

  // Emit output from shared memory.
  offsets[tid] = values[tid];

#if defined(PROFILING_TIME_SENSITIVE)
#if PROFILING_TIME_SENSITIVE == false
  if (tid == LOCAL_X - 1) {
    profiling_cluster_buffer.light_indices_count = offsets[tid];
  }
#endif
#else
#error PROFILING_TIME_SENSITIVE is not defined.
#endif
}
#elif PASS == 2
void main() {
  uint item_count =
      compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  uint blocks_per_dispatch =
      ceiled_div_u32(item_count, PASS_0_THREADS * PASS_1_THREADS);
  uint items_per_dispatch = PASS_0_THREADS * blocks_per_dispatch;

  uint offset_begin = wid * items_per_dispatch;
  uint offset_end = offset_begin + items_per_dispatch;

  uint acc = wid > 0 ? offsets[wid - 1] : 0;
  for (uint offset = offset_begin; offset < offset_end;
       offset += PASS_0_THREADS) {
    uint active_cluster_index = offset + tid;
    bool within_buffer_bounds = active_cluster_index < CLUSTERED_LIGHT_SHADING_MAX_ACTIVE_CLUSTERS;

    // Initialize shared memory
    if (within_buffer_bounds) {
      values[tid] = active_cluster_light_counts[active_cluster_index];
    }
    memoryBarrierShared();
    barrier();

    scan();

    // Emit offset.
    if (within_buffer_bounds) {
      uint light_offset = acc + (tid > 0 ? values[tid - 1] : 0);
      active_cluster_light_offsets[active_cluster_index] = light_offset;
    }

    // Add the total sum of the current segment to the accumulator.
    acc += values[LOCAL_X - 1];

    // Ensure shared memory was read in all threads before the next iteration starts writing.
    memoryBarrierShared();
    barrier();
  }
}
#else
#error Invalid PASS!
#endif
