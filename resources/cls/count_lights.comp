#include "native/PREFIX_SUM"
#include "native/CLUSTERED_LIGHT_SHADING"

#include "../common.glsl"
#include "cluster_space_buffer.glsl"
// in
#include "active_cluster_cluster_indices_buffer.glsl"
#include "light_xyzr_buffer.glsl"
// use
// out
#include "active_cluster_light_counts_buffer.glsl"

#define tid gl_LocalInvocationID.x
#define wid gl_WorkGroupID.x
#define LOCAL_X 128

layout(location = LIGHT_COUNT_LOC) uniform uint light_count;

shared uint values[LOCAL_X];

layout(local_size_x = LOCAL_X) in;

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

// Assumes values are loaded in shared memory.
void scan() {
#if (1 << 0) < LOCAL_X
  sum_2(1 << 0);
#endif
#if (1 << 1) < LOCAL_X
  sum_2(1 << 1);
#endif
#if (1 << 2) < LOCAL_X
  sum_2(1 << 2);
#endif
#if (1 << 3) < LOCAL_X
  sum_2(1 << 3);
#endif
#if (1 << 4) < LOCAL_X
  sum_2(1 << 4);
#endif
#if (1 << 5) < LOCAL_X
  sum_2(1 << 5);
#endif
#if (1 << 6) < LOCAL_X
  sum_2(1 << 6);
#endif
#if (1 << 7) < LOCAL_X
  sum_2(1 << 7);
#endif
#if (1 << 8) < LOCAL_X
  sum_2(1 << 8);
#endif
#if (1 << 9) < LOCAL_X
  sum_2(1 << 9);
#endif
#if (1 << 10) < LOCAL_X
#error Loop insufficiently unrolled.
#endif
}

void main() {
  uvec3 dimensions = cluster_space.dimensions;
  uint cluster_index = active_cluster_cluster_indices[wid];
  uvec3 idx_in_cls = index_1_to_3(cluster_index, dimensions);

  uint intersection_count = 0;
#if !defined(CLUSTERING_PROJECTION)
  #error CLUSTERING_PROJECTION is not defined.
#endif
#if CLUSTERING_PROJECTION == CLUSTERING_PROJECTION_PERSPECTIVE
  Frustum frustum = cluster_space.frustum;
  // Tangents.
  float x0 = lerp_u32_f32(idx_in_cls.x, 0, dimensions.x, frustum.x0, frustum.x1);
  float x1 = lerp_u32_f32(idx_in_cls.x + 1, 0, dimensions.x, frustum.x0, frustum.x1);
  float y0 = lerp_u32_f32(idx_in_cls.y, 0, dimensions.y, frustum.y0, frustum.y1);
  float y1 = lerp_u32_f32(idx_in_cls.y + 1, 0, dimensions.y, frustum.y0, frustum.y1);

  // Depths. z0 < z1 < 0
  float d = -frustum.z1 * (frustum.x1 - frustum.x0) / float(dimensions.x);
  float z0 = frustum.z1 * pow(1.0 + d, float(dimensions.z) - float(idx_in_cls.z));
  float z1 = frustum.z1 * pow(1.0 + d, float(dimensions.z) - float(idx_in_cls.z + 1));

  // Tangent plane normals.
  vec2 nx = normalize(vec2(-1.0, -x0));
  vec2 px = normalize(vec2(1.0, x1));
  vec2 ny = normalize(vec2(-1.0, -y0));
  vec2 py = normalize(vec2(1.0, y1));

  for (uint light_base = 0; light_base < light_count; light_base += LOCAL_X) {
    // TODO: Add bounding sphere check. Midpoint of longest diagonal probably good enough.
    uint light_index = light_base + tid;
    if (light_index < light_count) {
      vec4 light = light_xyzr[light_index];
      bool inside = true;
      if (dot(nx, light.xz) > light.w) {
        inside = false;
      }
      if (dot(px, light.xz) > light.w) {
        inside = false;
      }
      if (dot(ny, light.yz) > light.w) {
        inside = false;
      }
      if (dot(py, light.yz) > light.w) {
        inside = false;
      }
      if ((z0 - light.z) > light.w) {
        inside = false;
      }
      if ((light.z - z1) > light.w) {
        inside = false;
      }

      if (inside) {
        intersection_count += 1;
      }
    }
  }
#elif CLUSTERING_PROJECTION == CLUSTERING_PROJECTION_ORTHOGRAPHIC
  vec3 p0 = cluster_cls_to_cam(vec3(idx_in_cls));
  vec3 p1 = cluster_cls_to_cam(vec3(idx_in_cls + uvec3(1)));

  for (uint light_base = 0; light_base < light_count; light_base += LOCAL_X) {
    uint light_index = light_base + tid;
    if (light_index < light_count) {
      vec4 light = light_xyzr[light_index];
      float d = 0;
      float r;
      r = (light.x < p0.x ? p0.x - light.x : light.x - p1.x);
      if (r >= 0.0) {
        d += r*r;
      }
      r = (light.y < p0.y ? p0.y - light.y : light.y - p1.y);
      if (r >= 0.0) {
        d += r*r;
      }
      r = (light.z < p0.z ? p0.z - light.z : light.z - p1.z);
      if (r >= 0.0) {
        d += r*r;
      }
      if (d <= light.w * light.w) {
        intersection_count += 1;
      }
    }
  }
#else
  #error Unknown CLUSTERING_PROJECTION.
#endif

  values[tid] = intersection_count;
  memoryBarrierShared();
  barrier();

  scan();

  if (tid == LOCAL_X - 1) {
    active_cluster_light_counts[wid] = values[tid];
  }
}
