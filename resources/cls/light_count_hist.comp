#include "../common.glsl"

#include "cluster_space_buffer.glsl"
#include "compute_commands_buffer.glsl"
// in
#include "active_cluster_light_counts_buffer.glsl"
// out
#include "profiling_cluster_buffer.glsl"

// NOTE(mickvangelderen): This whole shader expects local_size_z = 1
// NOTE(mickvangelderen): We assume local_size_x equals the number of bins in the output histogram.
layout(local_size_x = 32, local_size_y = 8) in;

#define LOCAL_SIZE   (gl_WorkGroupSize.x * gl_WorkGroupSize.y)
#define LOCAL_OFFSET  (gl_LocalInvocationID.y * gl_WorkGroupSize.x)
#define LOCAL_INDEX  (LOCAL_OFFSET + gl_LocalInvocationID.x)
#define GLOBAL_OFFSET (gl_WorkGroupID.x * LOCAL_SIZE)
#define GLOBAL_INDEX (GLOBAL_OFFSET + LOCAL_INDEX)

shared uint shared_values[LOCAL_SIZE];

uint bin(uint value) {
  return min(gl_WorkGroupSize.x - 1, value / 8);
}

void main() {
  uint item_count = compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  bool within_bounds = GLOBAL_INDEX < item_count;

  // Read a block of data in one go.
  shared_values[LOCAL_INDEX] = within_bounds ? active_cluster_light_counts[GLOBAL_INDEX] : 0;
  memoryBarrierShared();
  barrier();

  // Have every thread go over up to local_size_x values
  uint local_end = min(LOCAL_OFFSET + gl_WorkGroupSize.x, item_count - GLOBAL_OFFSET);
  uint acc = 0;
  for (uint i = LOCAL_OFFSET; i < local_end; i++) {
    uint value = shared_values[i];
    if (bin(value) == gl_LocalInvocationID.x) {
      acc += 1;
    }
  }

  atomicAdd(profiling_cluster_buffer.light_count_hist[gl_LocalInvocationID.x], acc);
}
