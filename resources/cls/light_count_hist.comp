#include "../common.glsl"

#include "cluster_space_buffer.glsl"
#include "compute_commands_buffer.glsl"
#include "active_cluster_light_counts_buffer.glsl"
#include "active_cluster_cluster_indices_buffer.glsl"
#include "cluster_fragment_counts_buffer.glsl"
// out
#include "profiling_cluster_buffer.glsl"

layout(local_size_x = 256) in;

shared uint shared_light_counts[gl_WorkGroupSize.x];
shared uint shared_fragment_counts[gl_WorkGroupSize.x];

uint bin(uint value) {
  return value/4;
}

void main() {
  uint item_count = compute_commands[COMPUTE_COMMAND_INDEX_ACTIVE_CLUSTER_COUNT].work_group_x;
  uint active_cluster_index = gl_GlobalInvocationID.x;
  bool within_bounds = active_cluster_index < item_count;

  // Read a block of data in one go.
  shared_light_counts[gl_LocalInvocationID.x] = within_bounds ? active_cluster_light_counts[active_cluster_index] : 0;
  uint cluster_index = active_cluster_cluster_indices[active_cluster_index];
  shared_fragment_counts[gl_LocalInvocationID.x] = within_bounds ? cluster_fragment_counts[cluster_index] : 0;
  memoryBarrierShared();
  barrier();

  // Have every thread go over up to local_size_x values
  uint clus_acc = 0;
  uint frag_acc = 0;
  int end = clamp(item_count - gl_WorkGroupID.x * gl_WorkGroupSize.x, 0, 256);
  for (int i = 0; i < end; i++) {
    uint light_count = shared_light_counts[i];
    uint frag_count = shared_fragment_counts[i];
    if (bin(light_count) == gl_LocalInvocationID.x) {
      clus_acc += 1;
      frag_acc += frag_count;
    }
  }

  atomicAdd(profiling_cluster_buffer.lights_per_cluster_hist[gl_LocalInvocationID.x], clus_acc);
  atomicAdd(profiling_cluster_buffer.lights_per_fragment_hist[gl_LocalInvocationID.x], frag_acc);
}
