#line 2 2

shared uint values[PASS_0_THREADS];

layout(local_size_x = PASS_0_THREADS) in;

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

// Assumes values are loaded in shared memory.
void pass_0_scan() {
#if (1 << 0) < PASS_0_THREADS
  sum_2(1 << 0);
#endif
#if (1 << 1) < PASS_0_THREADS
  sum_2(1 << 1);
#endif
#if (1 << 2) < PASS_0_THREADS
  sum_2(1 << 2);
#endif
#if (1 << 3) < PASS_0_THREADS
  sum_2(1 << 3);
#endif
#if (1 << 4) < PASS_0_THREADS
  sum_2(1 << 4);
#endif
#if (1 << 5) < PASS_0_THREADS
  sum_2(1 << 5);
#endif
#if (1 << 6) < PASS_0_THREADS
  sum_2(1 << 6);
#endif
#if (1 << 7) < PASS_0_THREADS
  sum_2(1 << 7);
#endif
#if (1 << 8) < PASS_0_THREADS
  sum_2(1 << 8);
#endif
#if (1 << 9) < PASS_0_THREADS
  sum_2(1 << 9);
#endif
#if (1 << 10) < PASS_0_THREADS
#error Loop insufficiently unrolled.
#endif
}

void main() {
  uint N = ITEM_COUNT;
  uint T0T1 = PASS_0_THREADS * PASS_1_THREADS;
  uint C = N / T0T1 + ((N % T0T1) == 0 ? 0 : 1);
  uint B = C * PASS_0_THREADS;

  uint w0 = wid * B;
  uint w1 = w0 + B;

  // Sum up segment of size C*PASS_0_THREADS
  uint acc = 0;
  for (uint offset = w0; offset < w1; offset += PASS_0_THREADS) {
    acc += ib.values[offset + tid];
  }

  // Initialize shared memory
  values[tid] = acc;
  memoryBarrierShared();
  barrier();

  pass_0_scan();

  // Emit output from shared memory.
  if (tid == 0) {
    offsets[wid] = values[PASS_0_THREADS - 1];
  }
}
