#line 2 2

shared uint values[PASS_1_THREADS];

layout(local_size_x = PASS_1_THREADS) in;

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

// Assumes values are loaded in shared memory.
void pass_1_scan() {
#if (1 << 0) < PASS_1_THREADS
  sum_2(1 << 0);
#endif
#if (1 << 1) < PASS_1_THREADS
  sum_2(1 << 1);
#endif
#if (1 << 2) < PASS_1_THREADS
  sum_2(1 << 2);
#endif
#if (1 << 3) < PASS_1_THREADS
  sum_2(1 << 3);
#endif
#if (1 << 4) < PASS_1_THREADS
  sum_2(1 << 4);
#endif
#if (1 << 5) < PASS_1_THREADS
  sum_2(1 << 5);
#endif
#if (1 << 6) < PASS_1_THREADS
  sum_2(1 << 6);
#endif
#if (1 << 7) < PASS_1_THREADS
  sum_2(1 << 7);
#endif
#if (1 << 8) < PASS_1_THREADS
  sum_2(1 << 8);
#endif
#if (1 << 9) < PASS_1_THREADS
  sum_2(1 << 9);
#endif
#if (1 << 10) < PASS_1_THREADS
#error Loop insufficiently unrolled.
#endif
}

void main() {
  // Initialize shared memory
  values[tid] = offsets[tid];
  memoryBarrierShared();
  barrier();

  pass_1_scan();

  // Emit output from shared memory.
  offsets[tid] = values[tid];
}
