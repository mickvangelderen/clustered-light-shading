#line 2 2

layout(std430, binding = 1) buffer OffsetBuffer { uint offsets[LOCAL_XYZ]; };

shared uint values[LOCAL_XYZ];

layout(local_size_x = LOCAL_X, local_size_y = LOCAL_Y,
       local_size_z = LOCAL_Z) in;

#define tid gl_LocalInvocationIndex

void sum_2(uint s) {
  uint acc = values[tid] + (tid >= s ? values[tid - s] : 0);
  memoryBarrierShared();
  barrier();

  values[tid] = acc;
  memoryBarrierShared();
  barrier();
}

void main() {
  // Initialize shared memory
  values[tid] = offsets[tid];
  memoryBarrierShared();
  barrier();

  // Compute prefix sum.
#if (1 << 0) < LOCAL_XYZ
  sum_2(1 << 0);
#endif
#if (1 << 1) < LOCAL_XYZ
  sum_2(1 << 1);
#endif
#if (1 << 2) < LOCAL_XYZ
  sum_2(1 << 2);
#endif
#if (1 << 3) < LOCAL_XYZ
  sum_2(1 << 3);
#endif
#if (1 << 4) < LOCAL_XYZ
  sum_2(1 << 4);
#endif
#if (1 << 5) < LOCAL_XYZ
  sum_2(1 << 5);
#endif
#if (1 << 6) < LOCAL_XYZ
  sum_2(1 << 6);
#endif
#if (1 << 7) < LOCAL_XYZ
  sum_2(1 << 7);
#endif
#if (1 << 8) < LOCAL_XYZ
  sum_2(1 << 8);
#endif
#if (1 << 9) < LOCAL_XYZ
  sum_2(1 << 9);
#endif
#if (1 << 10) < LOCAL_XYZ
#error Loop insufficiently unrolled.
#endif

  // Emit output from shared memory.
  offsets[tid] = values[tid];
}
