#include "common.glsl"
#include "light_buffer.glsl"

layout(binding = DISTANCE_SAMPLER_BINDING) uniform samplerCube distance_sampler;
layout(binding = NOR_SAMPLER_BINDING) uniform samplerCube nor_sampler;
layout(binding = TINT_SAMPLER_BINDING) uniform samplerCube tint_sampler;

layout(local_size_x = 8, local_size_y = 8) in;

void main() {
  vec2 st = (vec2(gl_LocalInvocationID.xy) + vec2(0.5)) / vec2(gl_WorkGroupSize.xy) - vec2(0.5);

  vec3 pick_f[6] = {
    vec3(1.0, 0.0, 0.0),
    vec3(-1.0, 0.0, 0.0),
    vec3(0.0, 1.0, 0.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, 0.0, 1.0),
    vec3(0.0, 0.0, -1.0),
  };

  vec3 pick_s[6] = {
    vec3(0.0, 0.0, -1.0),
    vec3(0.0, 0.0, 1.0),
    vec3(1.0, 0.0, 0.0),
    vec3(1.0, 0.0, 0.0),
    vec3(1.0, 0.0, 0.0),
    vec3(-1.0, 0.0, 0.0),
  };

  vec3 pick_t[6] = {
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, 0.0, 1.0),
    vec3(0.0, 0.0, -1.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, -1.0, 0.0),
  };

  vec3 dir = normalize(
    pick_f[gl_WorkGroupID.z] * 0.5 +
    pick_s[gl_WorkGroupID.z] * st.s +
    pick_t[gl_WorkGroupID.z] * st.t
  );

  PointLight l = light_buffer.point_lights[0];
  float d = texture(distance_sampler, dir).r;

  uint i = gl_WorkGroupID.z * gl_WorkGroupSize.x * gl_WorkGroupSize.y + gl_LocalInvocationIndex + 1;

  if (d > l.r1) {
    return;
  }

  if (d < l.r0) {
    return;
  }

  vec3 n = texture(nor_sampler, dir).rgb;
  vec3 kd = texture(tint_sampler, dir).rgb;
  vec3 new_tint = l.i/(d*d)*max(0.0, dot(-dir, n))*l.tint*kd;
  float new_i = min(l.i, max(max(new_tint.x, new_tint.y), new_tint.z));
  float new_r1 = sqrt(new_i/l.i0);

  if (new_r1 < l.r0) {
    return;
  }

  light_buffer.point_lights[i].position = l.position + (d + 0.1) * dir;
  // light_buffer.point_lights[i].normal = u8x3_to_u32(uvec3(clamp(n * 128.0 + 128.0, 0.0, 255.0)));
  light_buffer.point_lights[i].i = new_i;
  light_buffer.point_lights[i].i0 = l.i0;
  light_buffer.point_lights[i].r0 = l.r0;
  light_buffer.point_lights[i].r1 = new_r1;
  light_buffer.point_lights[i].tint = new_tint;
}
