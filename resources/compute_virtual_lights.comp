#include "common.glsl"
#include "light_buffer.glsl"

layout(binding = DISTANCE_SAMPLER_BINDING) uniform samplerCube distance_sampler;
layout(binding = NOR_SAMPLER_BINDING) uniform samplerCube nor_sampler;
layout(binding = TINT_SAMPLER_BINDING) uniform samplerCube tint_sampler;
layout(location = TIME_LOC) uniform float time;
layout(location = SAMPLE_COUNT_LOC) uniform uint sample_count;

layout(local_size_x = 128) in;

float rand2 (vec2 st) {
  return fract(sin(dot(st, vec2(12.9898,78.233))) * 43758.5453123);
}

vec3 rand_sphere_surface() {
  float x = float(gl_GlobalInvocationID.x);
  float y = time;
  float u0 = rand2(vec2(x, y) * 2.0 + vec2(0.0, 0.0))*2.0 - 1.0;
  float u1 = rand2(vec2(x, y) * 2.0 + vec2(1.0, 0.0))*2.0 - 1.0;
  float u2 = rand2(vec2(x, y) * 2.0 + vec2(0.0, 1.0))*2.0 - 1.0;
  float u3 = rand2(vec2(x, y) * 2.0 + vec2(1.0, 1.0))*2.0 - 1.0;
  float scale = 1.0/(u0*u0 + u1*u1 + u2*u2 + u3*u3);
  return vec3(
    2.0*(u0*u2 + u1*u3),
    2.0*(u2*u3 - u0*u1),
    (u0*u0 + u3*u3 - u1*u1 - u2*u2)
  )*scale;
}

void main() {
  uint i = gl_GlobalInvocationID.x + 1;

  if (i > sample_count) {
    return;
  }

  vec3 dir = normalize(rand_sphere_surface());

  PointLight l = light_buffer.point_lights[0];
  float d = texture(distance_sampler, dir).r;

  if (d > l.r1) {
    return;
  }

  if (d < l.r0) {
    return;
  }

  vec3 n = texture(nor_sampler, dir).rgb;
  vec3 kd = texture(tint_sampler, dir).rgb;
  vec3 new_tint = l.i/(d*d)*max(0.0, dot(-dir, n))*l.tint*kd;
  float new_i = min(l.i, max(max(new_tint.x, new_tint.y), new_tint.z));
  float new_r1 = sqrt(new_i/l.i0);

  if (new_r1 < l.r0) {
    return;
  }

  light_buffer.point_lights[i].position = l.position + (d + 0.1) * dir;
  // light_buffer.point_lights[i].normal = u8x3_to_u32(uvec3(clamp(n * 128.0 + 128.0, 0.0, 255.0)));
  light_buffer.point_lights[i].i = new_i;
  light_buffer.point_lights[i].i0 = l.i0;
  light_buffer.point_lights[i].r0 = l.r0;
  light_buffer.point_lights[i].r1 = new_r1;
  light_buffer.point_lights[i].tint = new_tint;
}
